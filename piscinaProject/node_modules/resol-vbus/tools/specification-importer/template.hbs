/*! resol-vbus | Copyright (c) 2013-2017, Daniel Wippermann | MIT license */
'use strict';



var createVBusSpecificationData = function() {
    // ---- UNITS ----
    var units = {
{{#each units}}
        {{unitCode}}: {
            unitId: {{stringify unitCode}},
            unitCode: {{stringify unitCode}},
            unitFamily: {{stringify unitFamily}},
            unitText: {{stringify unitText}},
        },
{{/each}}
    };



    var types = {
{{#each types}}
        {{typeId}}: {
            typeId: {{stringify typeId}},
            rootTypeId: {{stringify rootTypeId}},
            precision: {{precision}},
            unit: units.{{unitCode}},
        },
{{/each}}
    };



    var getRawValueFunctions = {
{{#each fieldTemplates}}
        _{{packetFieldId}}: function(buffer, start, end) {
            var rawValue = 0, valid = false;
            {{#each parts}}if (start + {{offset}} < end) {
                rawValue += {{#if hasBitPos}}({{/if}}{{#if hasMask}}({{/if}}buffer.read{{#unless isSigned}}U{{/unless}}Int8(start + {{offset}}){{#if hasMask}} & {{mask}}){{/if}}{{#if hasBitPos}} >> {{bitPos}}){{/if}} * {{factor}};
                valid = true;
            }
            {{/each}}
            if (valid) {
                rawValue = rawValue * {{factor}};
            } else {
                rawValue = null;
            }
            return rawValue;
        },
{{/each}}
    };



    var setRawValueFunctions = {
{{#each fieldTemplates}}
        _{{packetFieldId}}: function(newValue, buffer, start, end) {
            newValue = Math.round(newValue / {{factor}});
            var rawValue;
            {{#each parts}}if (start + {{offset}} < end) {
                {{#if hasMask}}rawValue = buffer.readUInt8(start + {{offset}}) & (~({{mask}}));
                rawValue |= {{#if hasBitPos}}({{/if}}newValue{{#if hasBitPos}} << {{bitPos}}){{/if}} & {{mask}};
                {{else}}rawValue = Math.floor(newValue / {{factor}}) & 255;
                {{/if}}buffer.writeUInt8(rawValue, start + {{offset}});
            }
            {{/each}}
        },
{{/each}}
    };



    var deviceSpecs = {
{{#each devices}}
        _{{deviceId}}: {
            name: {{stringify name}}
        },
        {{/each}}
    };



    var getDeviceSpecification = function(selfAddress, peerAddress) {
        var deviceSpec;
        {{#each devices}}if ((selfAddress === 0x{{deviceId}}) && (true)) {
            deviceSpec = deviceSpecs._{{deviceId}};
        } else {{/each}}{
            deviceSpec = null;
        }
        return deviceSpec;
    };



    var packetFieldSpecs = {
        {{#each packetTemplates}}_{{packetId}}: [{{#each fields}}{
            fieldId: {{stringify fieldId}},
            name: {{stringify name}},
            type: types.{{typeId}},
            factor: {{factor}},
            getRawValue: getRawValueFunctions._{{packetFieldId}},
            setRawValue: setRawValueFunctions._{{packetFieldId}},
            parts: [{{#each parts}}{
                offset: {{offset}},
                mask: {{mask}},
                isSigned: {{isSigned}},
                factor: {{factor}},
            }, {{/each}}],
        }, {{/each}}],
        {{/each}}
    };



    var packetSpecs = {
        {{#each packetTemplates}}_{{packetId}}: {
            packetId: {{stringify packetId}},
            packetFields: packetFieldSpecs._{{packetId}},
        },
        {{/each}}
    };



    var getPacketSpecification = function(destinationAddress, sourceAddress, command) {
        var packetSpec;
        {{#each packets}}if ({{destinationCondition}} && {{sourceCondition}} && {{commandCondition}}) {
            packetSpec = packetSpecs._{{packetTemplateId}};
        } else {{/each}}{
            packetSpec = null;
        }
        return packetSpec;
    };



    var vbusSpecificationData = {
        units: units,
        types: types,
        getRawValueFunctions: getRawValueFunctions,
        deviceSpecs: deviceSpecs,
        getDeviceSpecification: getDeviceSpecification,
        packetFieldSpecs: packetFieldSpecs,
        packetSpecs: packetSpecs,
        getPacketSpecification: getPacketSpecification,
    };

    return vbusSpecificationData;
};



module.exports = createVBusSpecificationData;
